//if(i==0){
				bd_rod_1.position.Set(-26.0f,15.0f);
			//}
			/*else if(i==1){
				bd_rod_1.position.Set(-19.0f,15.0f);
			}
			else if(i==2){
				bd_rod_1.position.Set(-5.0f,15.0f);
			}
			else if(i==3){
				bd_rod_1.position.Set(9.0f,15.0f);
			}*/






















	  
    /*!<b> <CENTER> Variables </CENTER></b>
	b2Body *b1: pointer to the body ground <br>
     */ 

b2Body* b1;  
    {
      b2EdgeShape shape; 
      shape.Set(b2Vec2(-80.0f, 0.0f), b2Vec2(80.0f, 0.0f));
      b2BodyDef bd; 
      b1 = m_world->CreateBody(&bd); 
      b1->CreateFixture(&shape, 0.0f);
    }


//Shelf
    /*! <hr> <b>Top horizontal shelf (on which dominos are present) </b>
     */
    {
      b2PolygonShape shape;//! b2PolygonShape shape: Defines the polygon shape for the horizontal shelf
      shape.SetAsBox(6.0f, 0.25f);
	
      b2BodyDef bd;//!b2BodyDef bd: Defines the body for the horizontal shelf, used to set position etc. in the simulation
      bd.position.Set(-31.0f, 30.0f);
      b2Body* ground = m_world->CreateBody(&bd);
      ground->CreateFixture(&shape, 0.0f);
    }

    /// <hr> <b>Dominos</b>
    {
      b2PolygonShape shape;//! b2PolygonShape shape: Defines the polygon shape for all dominos
      shape.SetAsBox(0.1f, 1.0f);
	
      b2FixtureDef fd; ///b2FixtureDef fd: Defines fixtures for the dominos, used to edit density, restitution etc. of the dominos
      fd.shape = &shape;
      fd.density = 20.0f;
      fd.friction = 0.1f;
		
      for (int i = 0; i < 10; ++i)
	{
	  b2BodyDef bd;/// b2BodyDef bd: Defines the body for all the dominos
	  bd.type = b2_dynamicBody;
	  bd.position.Set(-35.5f + 1.0f * i, 31.25f);
	  b2Body* body = m_world->CreateBody(&bd);
	  body->CreateFixture(&fd);
	}
    }
      
    /// <hr> <b> Another horizontal shelf (on which small spheres are present) </b>
    {
      b2PolygonShape shape;//! b2PolygonShape shape: Defines the polygon shape for the horizontal shelf
      shape.SetAsBox(7.0f, 0.25f, b2Vec2(-20.f,20.f), 0.0f);
	
      b2BodyDef bd;/// b2BodyDef bd: Defines the body for this horizontal shelf 
      bd.position.Set(1.0f, 6.0f);
      b2Body* ground = m_world->CreateBody(&bd);
      ground->CreateFixture(&shape, 0.0f);
      
    }


    /*! <hr> <b> The pendulum that knocks the dominos off </b> */
    {
      b2Body* b2;
      {
	b2PolygonShape shape;//! b2PolygonShape shape: Defines the polygon shape for the vertical base to which one end is hinged
	shape.SetAsBox(0.25f, 1.5f);	  
	b2BodyDef bd;
	bd.position.Set(-36.5f, 28.0f);
	b2 = m_world->CreateBody(&bd);
	b2->CreateFixture(&shape, 10.0f);
      }
	
      b2Body* b4;
      {
	b2PolygonShape shape;//! b2PolygonShape shape: Defines the polygon shape for the vertical base to which the other end is hinged
	shape.SetAsBox(0.25f, 0.25f);
	  
	b2BodyDef bd;
	bd.type = b2_dynamicBody;
	bd.position.Set(-40.0f, 33.0f);
	b4 = m_world->CreateBody(&bd);
	b4->CreateFixture(&shape, 2.0f);
      }
	
     b2RevoluteJointDef jd;/// b2RevoluteJointDef jd: defines the joint for revolution of the pendulum.
      b2Vec2 anchor; 	    /// b2Vec2 anchor:	defines a vector which defines the direction in which the pendulum points
      anchor.Set(-37.0f, 40.0f);
      jd.Initialize(b2, b4, anchor);
      m_world->CreateJoint(&jd);
    }
      
 //! <hr> <b>The train of small spheres </b>
    {
      b2Body* spherebody; /// b2Body* spherebody: pointer to the sphere body
	
      b2CircleShape circle;//! b2CircleShape circle: Defines the shape for spheres
      circle.m_radius = 0.5;
	
      b2FixtureDef ballfd;/// b2FixtureDef ballfd: define the fixture(looks) for the spheres
      ballfd.shape = &circle;
      ballfd.density = 1.0f;
      ballfd.friction = 0.0f;
      ballfd.restitution = 0.0f;
	
      for (int i = 0; i < 10; ++i)
	{
	  b2BodyDef ballbd; /// b2BodyDef ballbd; Creates body for each of the spheres, used to set the position , type of the sphere(static or dynamic) etc..
	  ballbd.type = b2_dynamicBody;
	  ballbd.position.Set(-22.2f + i*1.0, 26.6f);
	  spherebody = m_world->CreateBody(&ballbd);
	  spherebody->CreateFixture(&ballfd);
	}
    }

    //! <hr> <b>The pulley system </b>
    {
      b2BodyDef *bd = new b2BodyDef;
      bd->type = b2_dynamicBody;
      bd->position.Set(-10,15);
      bd->fixedRotation = true;
      
       
      //!<b><i>The open box</i></b>
      b2FixtureDef *fd1 = new b2FixtureDef;///b2FixtureDef *fd1,*fd2,*fd3: Defines fixtures for the sides of the box
      fd1->density = 10.0;
      fd1->friction = 0.5;
      fd1->restitution = 0.f;
      fd1->shape = new b2PolygonShape;
      b2PolygonShape bs1;
      bs1.SetAsBox(2,0.2, b2Vec2(0.f,-1.9f), 0);
      fd1->shape = &bs1;
      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 10.0;
      fd2->friction = 0.5;
      fd2->restitution = 0.f;
      fd2->shape = new b2PolygonShape;
      b2PolygonShape bs2;
      bs2.SetAsBox(0.2,2, b2Vec2(2.0f,0.f), 0);
      fd2->shape = &bs2;
      b2FixtureDef *fd3 = new b2FixtureDef;
      fd3->density = 10.0;
      fd3->friction = 0.5;
      fd3->restitution = 0.f;
      fd3->shape = new b2PolygonShape;
      b2PolygonShape bs3;
      bs3.SetAsBox(0.2,2, b2Vec2(-2.0f,0.f), 0);
      fd3->shape = &bs3;
       
      b2Body* box1 = m_world->CreateBody(bd); ///   b2Body* box1 : pointer to a new box
      box1->CreateFixture(fd1);
      box1->CreateFixture(fd2);
      box1->CreateFixture(fd3);

      ///<b><i> The bar bd </i> </b>
      bd->position.Set(10,15);	
      fd1->density = 34.0;	  
      b2Body* box2 = m_world->CreateBody(bd);
      box2->CreateFixture(fd1);

      /// <b><i> The pulley joint </i></b>
      b2PulleyJointDef* myjoint = new b2PulleyJointDef();
      b2Vec2 worldAnchorOnBody1(-10, 15); /// b2vec2 worldAnchorOnBody1/2, worldAnchorGround1/2 Anchor point on body 1,2 and Ground 1,2 in world axis
      b2Vec2 worldAnchorOnBody2(10, 15); // Anchor point on body 2 in world axis
      b2Vec2 worldAnchorGround1(-10, 20); // Anchor point for ground 1 in world axis
      b2Vec2 worldAnchorGround2(10, 20); // Anchor point for ground 2 in world axis
      float32 ratio = 1.0f; /// float ratio: Define ratio
      myjoint->Initialize(box1, box2, worldAnchorGround1, worldAnchorGround2, box1->GetWorldCenter(), box2->GetWorldCenter(), ratio);
      m_world->CreateJoint(myjoint);
    }

    /// <hr> <b> The revolving horizontal platform </b>
    {
      b2PolygonShape shape;
      shape.SetAsBox(2.2f, 0.2f);
	
      b2BodyDef bd;
      bd.position.Set(14.0f, 14.0f);
      bd.type = b2_dynamicBody;
      b2Body* body = m_world->CreateBody(&bd);
      b2FixtureDef *fd = new b2FixtureDef;
      fd->density = 1.f;
      fd->shape = new b2PolygonShape;
      fd->shape = &shape;
      body->CreateFixture(fd);

      b2PolygonShape shape2;///b2PolygonShape shape2: Define a shape for the platfrom
      shape2.SetAsBox(0.2f, 2.0f);
      b2BodyDef bd2;
      bd2.position.Set(14.0f, 16.0f);
      b2Body* body2 = m_world->CreateBody(&bd2);

      b2RevoluteJointDef jointDef; ///b2RevoluteJointDef jointDef: Defines how the platform revolves
      jointDef.bodyA = body;
      jointDef.bodyB = body2;
      jointDef.localAnchorA.Set(0,0);
      jointDef.localAnchorB.Set(0,0);
      jointDef.collideConnected = false;
      m_world->CreateJoint(&jointDef);
    }
    
/// <hr> <b> [NEW]The second horizontal platform (on which new set of dominos are created) </b>
    {
      b2PolygonShape hor;//!b2PolygonShape hor: Defines the polygon shape for the horizontal shelf
      hor.SetAsBox(6.0f, 0.25f, b2Vec2(-20.f,20.f), 0.0f);	
      b2BodyDef horbd;//!b2BodyDef horbd: Defines the body for the horizontal shelf, used to set position etc. in the simulation
      horbd.position.Set(45.0f, -9.0f);
      b2FixtureDef horfd;
      horfd.restitution = 0.0f;
      b2Body* ground = m_world->CreateBody(&horbd);
      ground->CreateFixture(&hor, 0.0f);
    }
    
     /// <hr> <b> [NEW] Dominos </b>
    {
      b2PolygonShape shape;//! b2PolygonShape shape: Defines the polygon shape for each of the dominos
      shape.SetAsBox(0.1f, 1.0f);
	
      b2FixtureDef fd;//! b2FixtureDef fd: Defines fixtures for the dominos, used to edit density, restitution etc. of the dominos
      fd.shape = &shape;
      fd.density = 0.00001f;
      fd.friction = 0.1f;
		
      for (int i = 0; i < 7; ++i)
	{
	  b2BodyDef bd;//! b2BodyDef bd: Defines the body for all the dominos
	  bd.type = b2_dynamicBody;
	  bd.position.Set(20.0f + 1.0f * i, 12.0f);
	  b2Body* body = m_world->CreateBody(&bd);
	  body->CreateFixture(&fd);
	}
    }
    
    {
      b2BodyDef *bd = new b2BodyDef;
      bd->type = b2_staticBody;
      bd->position.Set(10,2);
      bd->fixedRotation = true;
      
      ///  <hr> <b>[NEW] Open box</b>
      b2FixtureDef *fd1 = new b2FixtureDef;//! b2FixtureDef *fd1,*fd2,*fd3: Defines fixtures for the sides of the box
      fd1->density = 10.0;
      fd1->friction = 0.5;
      fd1->restitution = 0.f;
      fd1->shape = new b2PolygonShape;
      b2PolygonShape bs1;
      bs1.SetAsBox(4,0.2, b2Vec2(0.f,-1.9f), 0);
      fd1->shape = &bs1;
      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 10.0;
      fd2->friction = 0.5;
      fd2->restitution = 0.f;
      fd2->shape = new b2PolygonShape;
      b2PolygonShape bs2;
      bs2.SetAsBox(0.2,4, b2Vec2(4.0f,2.f), 0);
      fd2->shape = &bs2;
      b2FixtureDef *fd3 = new b2FixtureDef;
      fd3->density = 10.0;
      fd3->friction = 0.5;
      fd3->restitution = 0.f;
      fd3->shape = new b2PolygonShape;
      b2PolygonShape bs3;
      bs3.SetAsBox(0.2,2, b2Vec2(-4.0f,0.f), 0);
      fd3->shape = &bs3;
       
      b2Body* box1 = m_world->CreateBody(bd);
      box1->CreateFixture(fd1);
      box1->CreateFixture(fd2);
      box1->CreateFixture(fd3);
  }

       /// <hr> <b>The heavy spheres on the platforms </b>
    {
      b2Body* sbody;
      b2Body* sbody1;
      b2CircleShape circle;
      circle.m_radius = 1.0;
	
      b2FixtureDef ballfd;//! b2FixtureDef ballfd: Defines fixtures for both the spheres
      ballfd.shape = &circle;
      ballfd.friction = 0.0f;
      b2BodyDef ballbd;//! b2BodyDef ballbd: Creates body for the sphere, used to set position, type of the sphere(static or dynamic) etc..
      ballbd.type = b2_dynamicBody;
      ballfd.density = 50.0f;
      ballfd.restitution = 0.0f;
      ballbd.position.Set(14.0f, 18.0f);
      sbody = m_world->CreateBody(&ballbd);
      sbody->CreateFixture(&ballfd);
      ballfd.density = 0.0008f;
      ballfd.restitution = 0.7f;
      ballbd.position.Set(30.0f, 12.0f);
      sbody1 = m_world->CreateBody(&ballbd);
      sbody1->CreateFixture(&ballfd);
    }


  //! <hr> <b>The see-saw system at the bottom </b>
    {
      /// <i> The triangle wedge </i>
      b2Body* sbody; ///b2Body* sbody: Defines the body for the wedge
      b2PolygonShape poly;
      b2Vec2 vertices[3]; ///b2Vec2 vertices[3]: defines the vertices for the wedge
      vertices[0].Set(-1,0);
      vertices[1].Set(1,0);
      vertices[2].Set(0,1.5);
      poly.Set(vertices, 3);
      b2FixtureDef wedgefd;/// b2FixtureDef wedgefd:Defines the fixture for the wedge
      wedgefd.shape = &poly;
      wedgefd.density = 10.0f;
      wedgefd.friction = 0.0f;
      wedgefd.restitution = 0.0f;
      b2BodyDef wedgebd;
      wedgebd.position.Set(30.0f, 0.0f);
      sbody = m_world->CreateBody(&wedgebd);
      sbody->CreateFixture(&wedgefd);
/// <I>The plank on top of the wedge </I>
      b2PolygonShape shape;
      shape.SetAsBox(15.0f, 0.2f);
      b2BodyDef bd2;
      bd2.position.Set(30.0f, 1.5f);
      bd2.type = b2_dynamicBody;
      b2Body* body = m_world->CreateBody(&bd2);
      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 1.f;
      fd2->shape = new b2PolygonShape;
      fd2->shape = &shape;
      body->CreateFixture(fd2);

      b2RevoluteJointDef jd; ///b2RevoluteJointDef jd: The joint which controls motion
      b2Vec2 anchor; ///       b2Vec2 anchor: Defines postion of joint
      anchor.Set(30.0f, 1.5f);
      jd.Initialize(sbody, body, anchor);
      m_world->CreateJoint(&jd);

      ///<i> The light box on the right side of the see-saw </i>
      b2PolygonShape shape2; ///b2PolygonShape shape2: Define shape
      shape2.SetAsBox(2.0f, 2.0f);
      b2BodyDef bd3; ///b2BodyDef bd3: Define body
      bd3.position.Set(40.0f, 2.0f);
      bd3.type = b2_dynamicBody;
      b2Body* body3 = m_world->CreateBody(&bd3);
      b2FixtureDef *fd3 = new b2FixtureDef; ///b2FixtureDef : Define fixture
      fd3->density = 0.001f;
      fd3->shape = new b2PolygonShape;
      fd3->shape = &shape2;
      body3->CreateFixture(fd3);
    }
